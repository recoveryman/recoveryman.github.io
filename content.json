{"meta":{"title":"회복맨","subtitle":"Wellcome ..!","description":"회복맨 입니다.","author":"회복맨","url":"https://recoveryman.github.io"},"pages":[{"title":"Portfolio","date":"2017-12-03T16:26:51.000Z","updated":"2017-12-07T04:53:47.565Z","comments":true,"path":"portfolio/index.html","permalink":"https://recoveryman.github.io/portfolio/index.html","excerpt":"","text":"한빛소프트2017~ 하이브랩2016~2017 엘엔케이로직코리아2015~2016"},{"title":"About","date":"2017-12-03T16:14:50.000Z","updated":"2017-12-04T15:10:52.804Z","comments":true,"path":"about/index.html","permalink":"https://recoveryman.github.io/about/index.html","excerpt":"","text":"환영합니다.안녕하세요. UI개발자 회복맨 입니다.이곳에 방문해 주신분들과 유익한 소통을 하고싶어서 개설하게 되었습니다.부족한게 많은 글들이지만 점점 나아지는 모습을 기록하려합니다. 지금 적극적으로 실행되는 괜찮은 계획이 다음 주의 완벽한 계획보다 낫다. George S. Patton Skills HTML CSS &amp; SASS javascript jQuery Git &amp; SVN Gulp"}],"posts":[{"title":"클래스정의 3가지 비교","slug":"클래스정의-3가지-비교","date":"2017-12-10T13:14:43.000Z","updated":"2017-12-10T16:17:40.728Z","comments":true,"path":"2017/12/10/클래스정의-3가지-비교/","link":"","permalink":"https://recoveryman.github.io/2017/12/10/클래스정의-3가지-비교/","excerpt":"","text":"특징 방식 특징 프로토타입방식 일반적인 클래스 제작 방법인스턴스마다 공통된 메서드를 공유해서 사용하는 장점이 있음jQuery도 prototype방식으로 만들어져 있음 함수 방식 간단한 클래스 제작 시 사용인스탄스마다 메서드가 독립적으로 만들어지는 단점이 있음 리터럴 방식 클래스 만드는 용도는 아니며 주로 여러개의 매개변수를 그룹으로 묶어 함수의 매개변수로 보낼 때 사용정의와 함께 인스턴스가 만들어지는 장점이 있음. 단! 인스턴스는 오직 하나만 만들 수 있음 클래스 정의 방법(포장) 비교리터럴방식 123456789var 인스턴스 = &#123; 프로퍼티1: 초깃값, 프로퍼티2: 초깃값, 메서드1: function() &#123; &#125;, 메서드2: function() &#123; &#125;&#125; 함수방식 123456789function 클래스이름() &#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값; this.메서드1 = function() &#123; &#125; this.메서드2 = function() &#123; &#125;&#125; 프로토타입 방식 123456789function 클래스이름()&#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값;&#125;클래스이름.prototype.메서드1 = function() &#123;&#125;클래스이름.prototype.메서드2 = function() &#123;&#125; 인스턴스 생성 방법 리터럴 방식 함수 방식 프로토타입 방식 var 인스턴스 = {}; var 인스턴스 = new 클래스이름(); var 인스턴스 = new 클래스이름(); 객체 외부에서 프로퍼티와 메서드 접근 방법리터럴 방식 123456789101112var 인스턴스 = &#123; 프로퍼티1: 초깃갑, 프로퍼티2: 초깃갑, 메서드1: function() &#123; &#125; 메서드2: function() &#123; &#125;&#125;인스턴스.프로퍼티1;인스턴스.메서드1(); 함수방식 123456789101112function 클래스이름() &#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값; this.메서드1 = function() &#123; &#125; this.메서드2 = function() &#123; &#125;&#125;인스턴스.프로퍼티1;인스턴스.메서드1(); 프로토타입 방식 123456789101112function 클래스이름()&#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값;&#125;클래스이름.prototype.메서드1 = function() &#123;&#125;클래스이름.prototype.메서드2 = function() &#123;&#125;인스턴스.프로퍼티1;인스턴스.메서드1(); 객체 내부에서 프로퍼티와 메서드 접근 방법리터럴 방식 1234567891011var 인스턴스 = &#123; 프로퍼티1: 초깃갑, 프로퍼티2: 초깃갑, 메서드1: function() &#123; alert(this.프로퍼티1); this.메서드2(); &#125; 메서드2: function() &#123; &#125;&#125; 함수방식 1234567891011function 클래스이름() &#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값; this.메서드1 = function() &#123; alert(this.프로퍼티1); this.메서드2(); &#125; this.메서드2 = function() &#123; &#125;&#125; 프로토타입 방식 1234567891011function 클래스이름()&#123; this.프로퍼티1 = 초깃값; this.프로퍼티2 = 초깃값;&#125;클래스이름.prototype.메서드1 = function() &#123; alert(this.프로퍼티1); this.메서드2();&#125;클래스이름.prototype.메서드2 = function() &#123;&#125;","categories":[{"name":"JS","slug":"JS","permalink":"https://recoveryman.github.io/categories/JS/"},{"name":"js 학습","slug":"JS/js-학습","permalink":"https://recoveryman.github.io/categories/JS/js-학습/"}],"tags":[]},{"title":"jQuery 마우스휠2","slug":"jQuery-마우스휠2","date":"2017-12-07T04:18:57.000Z","updated":"2017-12-07T04:51:30.312Z","comments":true,"path":"2017/12/07/jQuery-마우스휠2/","link":"","permalink":"https://recoveryman.github.io/2017/12/07/jQuery-마우스휠2/","excerpt":"","text":"앞에서 했던 이론이 이해가 되셨다면이제 UI를 만드는건 아주 쉽겟죠? 음수값(마우스를 내릴때)과 양수값(마우스를 올릴때)을 조건식으로 걸어주면 브라우저 이벤트객체 이슈를 고려한 UI 를 만들 수 있겠죠! 더해서 jQuery 플러그 인 중에 Scroll Lock 를 적절하게 응용한다면재밌는 UI를 만드리라 생각합니다! Scroll Lockdemo자 일단 이전글에 있던 마크업을 미리 복사해 줍니다. ㅋㅋ;; 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt;&lt;/style&gt; &lt;script src=\"http://code.jquery.com/jquery-1.11.3.min.js\"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $(\"html, body\").on('mousewheel DOMMouseScroll', function(e) &#123; var E = e.originalEvent; delta = 0; if (E.detail) &#123; delta = E.detail * -40; &#125;else&#123; delta = E.wheelDelta; &#125;; &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 이제 body 안에간단하게 ul, li 태그를 사용하여 몇가지 작성해 보도록 합니다. 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; *&#123;margin: 0;padding: 0;list-style-type: none;&#125; .clearfix&#123;*zoom: 1;&#125; .clearfix:after&#123;content: '';display: block;clear: both;&#125; div&#123;position: relative;width: 1000px;height: 200px;margin: 0 auto;overflow: hidden;&#125; ul&#123;position: absolute;left: 0;top: 0;width: 3000px;&#125; ul li&#123;width: 1000px;height: 200px;float: left;&#125; .box1&#123;background-color: #b3c4f8;&#125; .box2&#123;background-color: #f8bfb4;&#125; .box3&#123;background-color: #b4f8b6;&#125; &lt;/style&gt; &lt;script src=\"http://code.jquery.com/jquery-1.11.3.min.js\"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $(\"html, body\").on('mousewheel DOMMouseScroll', function(e) &#123; var E = e.originalEvent; delta = 0; if (E.detail) &#123; delta = E.detail * -40; &#125;else&#123; delta = E.wheelDelta; &#125;; &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;ul class=\"clearfix\"&gt; &lt;li class=\"box1\"&gt;&lt;/li&gt; &lt;li class=\"box2\"&gt;&lt;/li&gt; &lt;li class=\"box3\"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 이런식으로??div 의 크기는 현재 보여줄 li 의 크기만큼ul 의 크기는 li 의 갯수 곱하기 li의 width 값 만큼.( 이 부분은 스크립트로 처리하는게 범용성이 뛰어나겠죠? ) 자.. 스크립트를 작성해 봅니다. 스크립트는 자꾸자꾸 스스로 시도해 보면서 시행착오를 겪어봅시다.시행 착오를 직접 겪는것과 안겪는것은 큰 차이가 있습니다!정말로요..이 예제는 별거 아니지만…ㅠㅠ;; 저는 헤맸어요..;;.................................. iframe 에 스크롤 이 생겨서 휠 이벤트 를 보여주기 힘드네요 ㅎㅎ; 소스코드 다운받기 이걸 참고 하셔서 UI 를 만들어 보셔요 위의것과 동일합니다. jQuery 마우스휠1 jQuery 마우스휠2","categories":[{"name":"JS","slug":"JS","permalink":"https://recoveryman.github.io/categories/JS/"},{"name":"마크업부터 시작하는 UI","slug":"JS/마크업부터-시작하는-UI","permalink":"https://recoveryman.github.io/categories/JS/마크업부터-시작하는-UI/"}],"tags":[]},{"title":"jQuery 마우스휠1","slug":"jQuery-마우스휠1","date":"2017-12-07T00:26:43.000Z","updated":"2017-12-07T04:50:19.601Z","comments":true,"path":"2017/12/07/jQuery-마우스휠1/","link":"","permalink":"https://recoveryman.github.io/2017/12/07/jQuery-마우스휠1/","excerpt":"","text":"마우스 휠을 이용하여 이벤트를 만들어 봅시다.이 장에서는 마우스 휠에 대한 이론을 살펴 보도록 합시다. 예제용 UI를 찾아보려고 했는데 도통 간단한게 없어서 일단 예를 보여드리도록 하겠습니다. 마우스 휠을 아랫방향으로 했을 때에는 -120마우스 휠을 윗 방향으로 했을 때에는 120 이라는 숫자가 뜨죠? 이해를 돕기 위해 js 피들의 javascript 탭에 주석으로 달아 놓긴 했지만다시한번 글을 적어보도록 하겠습니다. 일단 제가 설치한 브라우저는크롬(Chrome), 익스(IE), 파이어폭스(Firefox) 기준으로 말씀드리겠습니다. 다른 브라우저는 테스트 해보진 않았지만 아마도(죄송합니다.. ㅠㅠ)익스, 크롬, 사파리, 오페라 의 경우엔mousewheel 이라는 이벤트를 사용할 수 있고 파이어폭스 의 경우엔DOMMouseScroll 이라는 이벤트를 사용할 수 있습니다. 즉… 파이어 폭스는 mousewheel 이라는 이벤트가 없기 때문에mousewheel 과 DOMMouseScroll 이벤트 두개를 동시에 걸어주는 메서드인 .on() 를 사용해야 합니다. Example123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html lang=\"ko\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt;&lt;/style&gt; &lt;script src=\"http://code.jquery.com/jquery-1.11.3.min.js\"&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $(\"html, body\").on('mousewheel DOMMouseScroll', function(e) &#123; var E = e.originalEvent; delta = 0; console.log(E); if (E.detail) &#123; delta = E.detail * -40; $('body').text(delta); &#125;else&#123; delta = E.wheelDelta; $('body').text(delta); &#125;; &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 일단 저의 마크업은 이렇습니다.이 마크업을 보시면 13번 라인에 콘솔창으로 E 를 찍어보게 됩니다.크롬에서 E 에 담긴걸 찍어보도록 하겠습니다.여기서 function()의 괄호 안에 있는 e 는 mousewheel 입니다! WheelEvent {}이라는 게 뜨죠? 정확히 13번 라인입니다.이걸 펼쳐보면… wheelDelta 라는 속성이 있습니다. 저 값이마우스 휠을 ‘내리게’ 되면 -120 을 출력하고마우스 휠을 ‘올리게’ 되면 120 을 출력합니다. 익스도 마찬가지로 크롬과 동일하게e.originalEvent 의 속성으로 wheelDelta 속성을 사용합니다. 하지만 파이어폭스는e.originalEvent &lt;- 여기서의 e 는 DOMMouseScroll 이벤트 입니다. 파이어폭스 에서도 똑같이 위와같은 마크업의 13번째 라인이 콘솔창에 출력 되었습니다.저 DOMMouseScroll 을 클릭해 보면 detail 이라는 속성이 들어있습니다.저 detail 속성은 파이어폭스에서만 사용할수 있는e.originalEvent 의 속성 입니다. 하지만…크롬도 익스도 120을 출력하는데얘만 3 출력하게 놔둔다면조건문을 이용한 UI를 만들때 불편하겠죠??? 그래서 -40을 곱하기 해주는 겁니다.파이어 폭스는 마우스를 휠을 올릴경우 음수값을마우스 휠을 내릴경우 양수값을 출력합니다. jQuery 마우스휠1 jQuery 마우스휠2","categories":[{"name":"JS","slug":"JS","permalink":"https://recoveryman.github.io/categories/JS/"},{"name":"마크업부터 시작하는 UI","slug":"JS/마크업부터-시작하는-UI","permalink":"https://recoveryman.github.io/categories/JS/마크업부터-시작하는-UI/"}],"tags":[]}]}